#include<stdio.h>
#include<stdlib.h>
typedef struct student{
   int no;
   char name[30];
   struct subject{
   int scode;
   char sname[30];
   int mark;
}sub[32];
int total;
}student;

void kayit (){
   student *s;
   FILE *fp;
   int n, i, j;
   printf("Kac ogrenci kaydetmek istersiniz:");
   scanf("%d", &n);
   
   s = (student*)calloc(n, sizeof(student));
   fp = fopen("mystudents.txt","w");
   
   
   for(i=0;i<n;i++){
   	s[i].total =  0;
   	  printf("Ogrenci no:");
   	  scanf("%d", &s[i]);
   	  fflush(stdin);
   	  printf("Ad Soyad:");
   	  scanf("%[^\n]s", s[i].name);
   	  for(j=0;j<2;j++){
   	    printf("Vize notu (enter) Final notu : ", j+1);
   	    scanf("%d", &s[i].sub[j].mark);
   	    s[i].total += s[i].sub[j].mark;
  }
 fwrite(&s[i], sizeof(student), 1, fp);
}
   fclose(fp);
   }
void goruntule(){
  student s1;
  FILE *fp;
  int j;
  fp = fopen("mystudents.txt","r");
  while(fread(&s1, sizeof(student),1,fp))
  {
  	printf("\n%-5d%-20s",s1.no,s1.name);
  	for(j=0;j<3;j++) {
  		printf("%4d",s1.sub[j].mark);
	  }
  	  printf("%5d%7.2f",s1.total);
  	
  }
  
   fclose(fp);

}
void ekle(){
   student *s;
   FILE *fp;
   int n, i, j;
   printf("Kac ogrenci eklemek istersiniz:");
   scanf("%d", &n);
   
   s = (student*)calloc(n, sizeof(student));
   fp = fopen("mystudents.txt","a");
   
   
   for(i=0;i<n;i++){
   	s[i].total =  0;
   	  printf("Ogrenci No:");
   	  scanf("%d", &s[i]);
   	  fflush(stdin);
   	  printf("Ad Soyad:");
   	  scanf("%[^\n]s", s[i].name);
   	  for(j=0;j<2;j++){
   	    printf("Vize Notu (enter) Final Notu : ", j+1);
   	    scanf("%d", &s[i].sub[j].mark);
   	    s[i].total += s[i].sub[j].mark;
  }
 fwrite(&s[i], sizeof(student), 1, fp);
}
   fclose(fp);
   }
   
void noofrec(){
	student s1;
	FILE *fp;
	fseek(fp,0,SEEK_END);
	int n = ftell(fp)/sizeof(student);
	printf("/n/nNO OF RECORDS =%d", n);
	fclose(fp);
	
}
void ara(){
student s1;
  FILE *fp;
  int j, no, found=0;
  fp = fopen("mystudents.txt","r");
  printf("Aramak istediginiz ogrencinin  numarası:");
  scanf("%d", &no);
  while(fread(&s1, sizeof(student),1,fp))
  {
  	if(s1.no == no) {
  		found=1;
  	printf("\n%-5d%-20s",s1.no,s1.name);
  	for(j=0;j<2;j++) {
  		printf("%4d",s1.sub[j].mark);
	  }
  	  printf("%5d%7.2f",s1.total);
  }
  }
  if(!found)
   printf("\nRecord Not Found\n");
   fclose(fp);
}

void guncelle(){
	student s1;
  FILE *fp, *fp1;
  int j, no, found=0;
  fp = fopen("mystudents.txt","r");
  fp1 = fopen("temp.txt","w");
  printf("Bilgilerini guncellemek istediginiz ogrencinin numarası:");
  scanf("%d", &no);
  while(fread(&s1, sizeof(student),1,fp))
  {
  	if(s1.no == no) {
  		s1.total = 0;
  		found=1;
  	fflush(stdin);
   	  printf("Yeni adı giriniz:");
   	  scanf("%[^\n]s", s1.name);
   	  for(j=0;j<2;j++){
   	    printf("Yeni vize ve final notunu giriniz: ", j+1);
   	    scanf("%d", &s1.sub[j].mark);
   	    s1.total += s1.sub[j].mark;
  }
  }
  fwrite(&s1, sizeof(student),1,fp1);
  }
  fclose(fp);
  fclose(fp1);
  if(found){
  	fp1 = fopen("temp.txt", "r");
  	fp = fopen("mystudent.txt", "w");
  	
  	while(fread(&s1,sizeof(student),1,fp1)){
  		fwrite(&s1,sizeof(student),1,fp);
	  }
  	fclose(fp);
  	fclose(fp1);
  }
  	
   else  
   printf("\nRecord Not Found\n");
   fclose(fp);
}
void sil (){
	
	student s1;
  FILE *fp, *fp1;
  int j, no, found=0;
  fp = fopen("mystudents.txt","r");
  fp1 = fopen("temp.txt","w");
  printf("Kaydını silmek istediginiz ogrencinin numarasını giriniz: ");
  scanf("%d", &no);
  while(fread(&s1,sizeof(student),1,fp))
  {
  	if(s1.no == no) {
  		found=1;
  }
  else
  fwrite(&s1,sizeof(student),1,fp1);
  }
  fclose(fp);
  fclose(fp1);
  if(found){
  	fp1 = fopen("temp.txt", "r");
  	fp = fopen("mystudent.txt", "w");
  	
  	while(fread(&s1,sizeof(student),1,fp1)){
  		fwrite(&s1,sizeof(student),1,fp);
	  }
  	fclose(fp);
  	fclose(fp1);
  }
  	
   else  
   printf("\nKayıt Bulunamadi\n");
}

void sort_total_on_screen(){
	student *s, s1;
	FILE *fp;
	int i,j;
	fp = fopen("mystudents.txt","r");
	fseek(fp,0,SEEK_END);
	int n = ftell(fp)/sizeof(student);
	s = (student*)calloc(n,sizeof(student));
	rewind(fp);
	for(i=0;i<n;i++)
	 fread(&s[i],sizeof(student),1,fp);
	for(i=0;i<n;i++){
		for(j=i+1;j<n;j++){
			if(s[i].total < s[j].total){
				s1 = s[i];
				s[i] = s[j];
				s[j] = s1;
			}
		}
	}
	for(i=0;i<n;i++){
		printf("\n%-5d%-20s",s[i].no,s[i].name);
  	for(j=0;j<2;j++) {
  		printf("%4d",s[i].sub[j].mark);
	  }
  	  printf("%5d%7.2f",s[i].total);
	}
	fclose(fp);
}
void sort_total_in_file(){
	student *s, s1;
	FILE *fp;
	int i,j;
	fp = fopen("mystudents.txt","r");
	fseek(fp,0,SEEK_END);
	int n = ftell(fp)/sizeof(student);
	s = (student*)calloc(n,sizeof(student));
	rewind(fp);
	for(i=0;i<n;i++)
	 fread(&s[i],sizeof(student),1,fp);
	 fclose(fp);
	 
	for(i=0;i<n;i++){
		for(j=i+1;j<n;j++){
			if(s[i].total < s[j].total){
				s1 = s[i];
				s[i] = s[j];
				s[j] = s1;
			}
		}
	}
	fp = fopen("mystudents.txt","a");
	for(i=0;i<n;i++){
		printf("\n%-5d%-20s",s[i].no,s[i].name);
  	for(j=0;j<2;j++) {
  		printf("%4d",s[i].sub[j].mark);
	  }
  	  printf("%5d%7.2f",s[i].total);
  	  fwrite(&s[i],sizeof(student),1,fp);
	}
	fclose(fp);
}
int main(){
	int ch;
	do{
		printf("\n1.KAYIT");
		printf("\n2.KAYITLARI GORUNTULE");
		printf("\n3.YENI KAYIT");
		printf("\n4.KAYIT KONUM NUMARASI");
		printf("\n5.ARA");
		printf("\n6.KAYIT GUNCELLE");
		printf("\n7.KAYIT SIL");
		printf("\n8.TOPLAM NOTU SIRALA - EKRANDA");
		printf("\n9.TOPLAM NOTU SIRALA - DOSYADA");
		printf("\n0.EXIT");
		
		printf("\nEnter Your Choice :");
		scanf("%d", &ch);
		
		switch(ch) {
			case 1:
				kayit();
			break;
			case 2:
				goruntule();
			break;
			case 3:
				ekle();
			break;
			case 4:
				noofrec();
		    break;
		    case 5:
		        ara();
		    break;
			case 6:
			    guncelle();
			break;	
			case 7:
			    sil();
			break;
			case 8:
				sort_total_on_screen();
		    break;
		    case 9:
		        sort_total_in_file();
		    break;
		}
		
	}while(ch!=0);
	
	
	
	
	
	
	
	
	
	
	
	return 0;
}